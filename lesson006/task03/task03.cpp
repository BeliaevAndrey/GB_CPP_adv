/*
Задание 3. Реализация программы таймера
Что нужно сделать
Реализуйте работу точного таймера с визуальной отдачей. В начале программы пользователь вводит количество минут и секунд, которые требуется засечь на таймере, и нажимает «Ввод». После этого начинается обратный отсчёт времени, о чём незамедлительно и последовательно сообщается пользователю. Формат вывода такой же, как и при вводе интервала: минуты и секунды. Как только отсчёт на таймере иссяк, программа сообщает об этом с помощью вывода в консоль специального сообщения. Сообщение вместо аудиосигнала может выглядеть так: DING! DING! DING!

Советы и рекомендации
Для ввода значения для засекания времени используйте std::get_time, но в качестве формата запросите только минуты и секунды. Целевое время для остановки таймера вычислите сами с помощью манипуляции над текущим std::time. Количество оставшегося времени выводите в цикле и вычислите его самостоятельно с помощью обращения с типом std::time_t как с секундами.
*/

#include <ctime>
#include <iostream>
#include <iomanip>
#include <unistd.h> // для sleep()

int main()
{
    std::time_t now = time(nullptr);    // posix время
    std::tm delta;  // переменная для длительности

    std::cout << "Input timer duration [MM:SS]: ";
    std::cin >> std::get_time(&delta, "%M:%S"); // получить длительность

    now = time(nullptr); // обновить текущее время
    // вычислить конечную точку
    time_t end = now + delta.tm_min * 60 + delta.tm_sec;

    std::tm tmN = *std::localtime(&end); // человекочитаемое время окончания
    std::cout << "Timer ends at: " << asctime(&tmN) << std::endl;

    std::time_t current = time(nullptr); // posix текущее
    std::tm* ct = localtime(&current);
    std::cout << "Starting at: " << asctime(ct) << std::endl;

    while (current < end) {
        sleep(1); // задержка вывода 1 сек
        std::cout << end - current << std::endl; // остаток
        current = time(nullptr);
    }
    std::cout << "DING! DING! DING!" << std::endl;
}