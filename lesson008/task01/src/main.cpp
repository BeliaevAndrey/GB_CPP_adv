/*
Задание 1. Реализация имитации аудиоплеера
Что нужно сделать С помощью классов реализуйте программу имитации работы
аудиоплеера. В плеере находится несколько аудиозаписей, доступных для
воспроизведения. Для них вы должны создать отдельный класс Track. Полями этого
класса должны быть: название, дата создания (здесь вы можете использовать тип
std::tm) и продолжительность записи в секундах. Сам плеер тоже реализуйте с
помощью класса. Внутри он должен содержать список доступных записей и нужные
для логики работы плеера поля.

Пользователь взаимодействует с программой с помощью команд:
* Команда play запрашивает у пользователя название записи для воспроизведения и
    начинает её воспроизведение. Воспроизведение симулируется с помощью вывода
    в консоль всей информации о записи. Если произведение какой-то записи уже
    начато, ничего не происходит.
* Команда pause. Ставит запись на паузу, о чём выводит соответствующее
    сообщение в консоль. Если запись уже на паузе или не воспроизводится вовсе,
    ничего не происходит.
* Команда next переходит к следующей записи для воспроизведения. Запись при
    этом выбирается случайно, как будто плеер работает в режиме shuffle.
* Команда stop прекращает воспроизведение текущей записи, если таковая имеется.
    Об этом выводится сообщение в консоль. Два раза остановить воспроизведение
    невозможно, так что команда должна срабатывать только в первом случае.
* Команда exit — выход из программы.

*/


#include <iostream>
#include "player.h"
#include <string>
// #include "track.h"


int main()
{
    bool activeFlag = true;

    int command = 0;
    Player* player = new Player();

    while (activeFlag) {
        std::cout << "Input command: ";
        std::cin >> command;
        switch (command)
        {
        case 1:
            int trackNo = -1;
            std::cout << "Input track number: ";
            std::cin >> trackNo;
            player->play(trackNo);
            break;
        case 2:
            player->pause();
            break;
        case 3:
            player->next();
            break;
        case 4:
            player->stop();
            break;
        case 5:
            player->exit(activeFlag);
            break;
        case 6:
            player->printPlaylist();
            break;
        case 7:
            player->loadPlaylist();
            break;

        default:
            std::cout << "Unknown command." << std::endl;
            break;
        }
    }

    return 0;
}
